
# Modified from: https://medium.com/intelligentmachines/github-actions-end-to-end-ci-cd-pipeline-for-django-5d48d6f00abf
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python 

# taken from: https://itnext.io/github-actions-ship-code-to-gcp-cloud-run-8d607f34e1cd (update depreciated now using )
        # https://github.com/google-github-actions/setup-gcloud#authorization
        # https://cloud.google.com/iam/docs/workload-identity-federation

# will need to lock down main branch 
# QUESTION - how do we do we integrate migrations with this process?
# QUESTION - is there a way to avoid douplicating the ci part of this?
  # * can reuse! https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions

name: Build and Deploy to Cloud Run

on:
    push:
        branches:
            - main

# Environment variables available to all jobs and steps in this workflow
env:
    # PROJECT_ID: ${{ secrets.PROJECT_ID }}
    PROJECT_ID: pdcp-cloud-014-lilakelland
    REGION: northamerica-northeast1
    ARTIFACT_REGISTRY_REPO: hello-world-app
    SERVICE_NAME: hello-world

jobs:
    setup-build-deploy:
        name: Setup, Build, and Deploy
        runs-on: ubuntu-latest

        permissions:
          contents: 'read'
          id-token: 'write'

        steps:
        - name: Checkout code 
          uses: actions/checkout@v2

        - id: 'auth'
          uses: 'google-github-actions/auth@v1'
          with:
            # credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
            workload_identity_provider: 'projects/294163875507/locations/global/workloadIdentityPools/github-wif-pool/providers/githubwif'
            service_account: 'github-action@pdcp-cloud-014-lilakelland.iam.gserviceaccount.com'

        - name: 'Set up Cloud SDK'
          uses: 'google-github-actions/setup-gcloud@v1'
          with:
            version: '>= 390.0.0'

        - name: 'Use gcloud CLI'
          run: 'gcloud info'
          # run: 'gcloud auth list --filter=status:ACTIVE --format="value(account)"'

        - name: Set project
          run: |
              gcloud config set project $PROJECT_ID

        # Build and push image to Google Container Registry (https://cloud.google.com/build/docs/build-push-docker-image)
        - name: Build
          run: |
              # gcloud builds submit -t northamerica-northeast1-docker.pkg.dev/phx-hellodjango/hello-world-app/hello-world:$GITHUB_SHA  djangoproject/. 
              docker build  -t  northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/hello-world-app/hello-world djangoproject/.
        
        - name: Push 
          run: |
              # docker push northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/hello-world-app/hello-world:$GITHUB_SHA 
              docker push northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/hello-world-app/hello-world
        
        # Deploy image to Cloud Run
        - name: Deploy
          run: |
              gcloud run deploy $SERVICE_NAME \
                --image northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/hello-world-app/hello-world \
                --region northamerica-northeast1 \
                --allow-unauthenticated \
                --platform managed


# on:
#   # any code pushed to main will also be a trigger 
#   push:
#     branches:
#       - main

# # 3 jobs - check code, build, push image to docker registry, deploy to cloud run
# jobs:
#   health-check-job: # health check job for testing and code formatting check
#     runs-on: ubuntu-latest # os for running the job
#     services:
#       postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
#         image: postgres
#         env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: github-actions
#         ports:
#           - 5432:5432 # exposing 5432 port for application to use
#         # needed because the postgres container does not provide a healthcheck
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#     steps:
#       - name: Checkout code # checking our the code at current commit that triggers the workflow
#         uses: actions/checkout@v2
#       - name: Cache dependency # caching dependency will make our build faster.
#         uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-
#       - name: Setup python environment # setting python environment to 3.x
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
#       - name: Check Python version # checking the python version to see if 3.x is installed.
#         run: python --version
#       - name: Install requirements # install application requirements
#         run: pip install -r djangoproject/requirements.txt
#       # - name: Check Syntax # check code formatting
#       #   run: pycodestyle --statistics .
#       - name: Run Migrations # run migrations to create table in side car db container
#         run: python djangoproject/manage.py migrate
#       - name: Run Test # running tests
#         run: python djangoproject/manage.py test




