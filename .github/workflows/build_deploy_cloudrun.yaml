
# Modified from: https://medium.com/intelligentmachines/github-actions-end-to-end-ci-cd-pipeline-for-django-5d48d6f00abf
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python 

# taken from: https://itnext.io/github-actions-ship-code-to-gcp-cloud-run-8d607f34e1cd

# will need to lock down main branch 
# QUESTION - how do we do we integrate migrations with this process?
# QUESTION - is there a way to avoid douplicating the ci part of this?
  # * can reuse! https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions

name: Build and Deploy to Cloud Run

on:
    push:
        branches:
            - test-deploy

# Environment variables available to all jobs and steps in this workflow
env:
    # PROJECT_ID: ${{ secrets.PROJECT_ID }}
    PROJECT_ID: pdcp-cloud-014-lilakelland
    REGION: northamerica-northeast1
    ARTIFACT_REGISTRY_REPO: hello-world-app
    SERVICE_NAME: hello-world

jobs:
    setup-build-deploy:
        name: Setup, Build, and Deploy
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            # Setup gcloud CLI
            - name: Set up gcloud
              uses: GoogleCloudPlatform/github-actions/setup-gcloud@main
              with:
                  version: '342.0.0'
                  service_account_email: ${{ secrets.SA_EMAIL }}
                  service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS}}

            # Configure gcloud CLI
            - name: gcloud Set up
              run: |
                  gcloud config set project $PROJECT_ID
            # Build and push image to Google Container Registry
            - name: Build
              run: |
                  gcloud builds submit -tag northamerica-northeast1-docker.pkg.dev/phx-hellodjango/hello-world-app/hello-world:$GITHUB_SHA \
                  --project $PROJECT_ID

            # Deploy image to Cloud Run
            - name: Deploy
              run: |
                  gcloud run deploy $SERVICE_NAME \
                    --image northamerica-northeast1-docker.pkg.dev/pdcp-cloud-014-lilakelland/hello-world-app/hello-world:$GITHUB_SHA \
                    --region northamerica-northeast1 \
                    --allow-unauthenticated \
                    --platform managed


# on:
#   # any code pushed to main will also be a trigger 
#   push:
#     branches:
#       - main

# # 3 jobs - check code, build, push image to docker registry, deploy to cloud run
# jobs:
#   health-check-job: # health check job for testing and code formatting check
#     runs-on: ubuntu-latest # os for running the job
#     services:
#       postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
#         image: postgres
#         env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: github-actions
#         ports:
#           - 5432:5432 # exposing 5432 port for application to use
#         # needed because the postgres container does not provide a healthcheck
#         options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#     steps:
#       - name: Checkout code # checking our the code at current commit that triggers the workflow
#         uses: actions/checkout@v2
#       - name: Cache dependency # caching dependency will make our build faster.
#         uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
#         with:
#           path: ~/.cache/pip
#           key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#           restore-keys: |
#             ${{ runner.os }}-pip-
#       - name: Setup python environment # setting python environment to 3.x
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
#       - name: Check Python version # checking the python version to see if 3.x is installed.
#         run: python --version
#       - name: Install requirements # install application requirements
#         run: pip install -r djangoproject/requirements.txt
#       # - name: Check Syntax # check code formatting
#       #   run: pycodestyle --statistics .
#       - name: Run Migrations # run migrations to create table in side car db container
#         run: python djangoproject/manage.py migrate
#       - name: Run Test # running tests
#         run: python djangoproject/manage.py test

# jobs:
#   job_id:
#     # ...

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#     - uses: 'actions/checkout@v3'

#     - uses: 'google-github-actions/auth@v1'
#       with:
#         workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#         service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

#     - id: 'deploy'
#       uses: 'google-github-actions/deploy-cloudrun@v1'
#       with:
#         service: 'hello-cloud-run'
#         image: 'gcr.io/cloudrun/hello'

#     - name: 'Use output'
#       run: 'curl "${{ steps.deploy.outputs.url }}"'
#     - name: Deploy to Cloud Run
#   uses: google-github-actions/deploy-cloudrun@v1.0.2


  # package-job: # package job for building and publishing docker images
  #   runs-on: ubuntu-latest
  #   needs: [health-check-job] # will be fired if and only if health-check-job is passed.
  #   if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
  #   steps:
  #     - name: Checkout Code # checking out code.
  #       uses: actions/checkout@v2
  #     - name: Build & Publish Image # we are using a public GitHub Action to build and publish docker image to our GCR registry.
  #       uses: docker/build-push-action@v1
  #       env:
  #         app_name: app
  #       with:
  #         username: _json_key # default for gcr.io
  #         password: ${{ secrets.GKE_PASSWORD }} # service account file to be set as secret
  #         registry: gcr.io # gcr registry domain
  #         repository: ${{secrets.GKE_PROJECT}}/github-django-actions/app # GKE_PROJECT is out GCP Project id to be set as secret.
  #         tag_with_sha: true # this will tag our image with commit id. For example our image our be gcr.io/project-id/github-django-actions/app:sha-7865423 where 7865423 is the short sha of our commit.

  # deploy-job: # deploy job is for deploying our code to google cloud cluster.
  #   runs-on: ubuntu-latest
  #   needs: [package-job] # will require package-job to be successful for triggering
  #   if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
  #   steps:
  #     - name: Checkout code # checking out code.
  #       uses: actions/checkout@v2
  #     - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master # settings up gcloud cli in our job machine.
  #       with:
  #         version: '270.0.0'
  #         service_account_email: ${{ secrets.GKE_EMAIL }} # email address of our service account that will be created with storage and kubernetes permissions
  #         service_account_key: ${{ secrets.GKE_PASSWORD }} # service account file.
  #     - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
  #       id: repo
  #       run: echo "::set-output name=repo_name::gcr.io/${{secrets.GKE_PROJECT}}/github-django-actions/app:sha-$(git rev-parse --short HEAD)" # we are setting the image location as output to be used in later step
  #     - name: Check Repo Location
  #       run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
  #     - name: Install Helm # helm installation in our runner for deploying.
  #       run: |
  #         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
  #         chmod 700 get_helm.sh
  #         ./get_helm.sh
  #     - name: Connect to kubernetes cluster
  #       run: |
  #         gcloud container clusters get-credentials ${{secrets.GKE_CLUSTER}} --zone ${{secrets.GKE_ZONE}} --project ${{secrets.GKE_PROJECT}}
  #     - name: Helm Deploy # deploying our helm chart to our cluster
  #       run: >
  #         helm upgrade
  #         --install
  #         --set image=${{ steps.repo.outputs.repo_name }}
  #         --set user=${{ secrets.DB_USER }}
  #         --set password=${{ secrets.DB_PASSWORD }}
  #         --set host=${{ secrets.DB_HOST }}
  #         --set port=${{ secrets.DB_PORT }}
  #         --set name=${{ secrets.DB_NAME }}
  #         --wait
  #         --atomic
  #         app
  #         ./k8s
  #     - name: Check pods # checking pod list to see if they are running.
  #       run: kubectl get pods


# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python 3.x
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.x
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#       - name: Lint with ruff
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
#           # default set of ruff rules with GitHub Annotations
#           ruff --format=github --target-version=py37 .
#       - name: Test with pytest
#         run: |
#           pytest



# from https://github.com/marketplace/actions/deploy-to-cloud-run
#********* needs to be edited!!! 


# jobs:
#   job_id:
#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#     - name: Deploy to Cloud Run
#       uses: google-github-actions/deploy-cloudrun@v1.0.2

#     - uses: 'actions/checkout@v3'

#     - uses: 'google-github-actions/auth@v1'
#       with:
#         workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#         service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

#     - id: 'deploy'
#       uses: 'google-github-actions/deploy-cloudrun@v1'
#       with:
#         service: 'hello-cloud-run'
#         image: 'gcr.io/cloudrun/hello'

#     - name: 'Use output'
#       run: 'curl "${{ steps.deploy.outputs.url }}"'




