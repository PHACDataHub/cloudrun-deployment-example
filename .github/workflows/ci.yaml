
# Modified from: https://medium.com/intelligentmachines/github-actions-end-to-end-ci-cd-pipeline-for-django-5d48d6f00abf
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python 


name: CI Workflow - on pull request
# will need to lock down main branch 
# Don't need to push to GCP 
# QUESTION - is there a way we can avoid douplicating this?


on:
  # opening a pull request to main is the trigger
  pull_request:
    types: 
      - opened
    branches:
      - main

# This is workflow has 4 steps: code check (which will have been done in ci.yaml on pull request open), 
#build docker image, push to artifact registry and deploy to cloud run

jobs:
  health-check-job: # health check job for testing and code formatting check
    runs-on: ubuntu-latest # os for running the job
    services:
      postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
        image: postgres
        env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 # exposing 5432 port for application to use
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code # checking our the code at current commit that triggers the workflow
        uses: actions/checkout@v2
      - name: Cache dependency # caching dependency will make our build faster.
        uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Install requirements # install application requirements
        run: pip install -r requirements.txt
      # - name: Check Syntax # check code formatting
      #   run: pycodestyle --statistics .
      - name: Run Migrations # run migrations to create table in side car db container
        run: python mydjangoproject/manage.py migrate
      - name: Run Test # running tests
        run: python mydjangoproject/manage.py test

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python 3.x
#         uses: actions/setup-python@v4
#         with:
#           python-version: 3.x
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#       - name: Lint with ruff
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
#           # default set of ruff rules with GitHub Annotations
#           ruff --format=github --target-version=py37 .
#       - name: Test with pytest
#         run: |
#           pytest



# from https://github.com/marketplace/actions/deploy-to-cloud-run
#********* needs to be edited!!! 


# jobs:
#   job_id:
#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#     - name: Deploy to Cloud Run
#       uses: google-github-actions/deploy-cloudrun@v1.0.2

#     - uses: 'actions/checkout@v3'

#     - uses: 'google-github-actions/auth@v1'
#       with:
#         workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
#         service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

#     - id: 'deploy'
#       uses: 'google-github-actions/deploy-cloudrun@v1'
#       with:
#         service: 'hello-cloud-run'
#         image: 'gcr.io/cloudrun/hello'

#     - name: 'Use output'
#       run: 'curl "${{ steps.deploy.outputs.url }}"'




